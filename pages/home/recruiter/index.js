import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import styles from "../../../styles/Home.module.css";
import axios from "axios";
import { useRouter } from "next/router";
import Link from "next/link";

export async function getServerSideProps(context) {
	const names = await context.query.names;
	const page = await context.query.page;
	const sortOrd = await context.query.sortOrd;

	try {
		const response = await axios({
			method: "GET",
			url: `${process.env.NEXT_PUBLIC_BACKEND_URL}/user/search/${names}?page=${page}&sortOrd=${sortOrd}`,
		});
		return {
			props: {
				data: response.data.data.rows,
				error: false,
				errorMessage: "",
			},
		};
	} catch (error) {
		return {
			props: {
				data: [],
				error: true,
				errorMessage: "Error API",
			},
		};
	}
}

const HomeRecruiter = (props) => {
	const router = useRouter();
	const [names, setNames] = useState("");
	const [page, setPage] = useState(1);
	const [sortOrd, setSortOrd] = useState("asc");
	const data = props.data;

	// set search
	const routeTo = (names, page, sortOrd) => {
		router.push({
			pathname: "/home/recruiter",
			query: { names: `${names}`, page: `${page}`, sortOrd: `${sortOrd}` },
		});
	};

	const onSubmit = (e) => {
		e.preventDefault();
		routeTo(names, page, sortOrd);
	};

	// pagination
	const nextPage = () => {
		setPage(page + 1);
		routeTo(names, page + 1, sortOrd);
	};

	const prevPage = () => {
		if (page > 1) {
			setPage(page - 1);
			routeTo(names, page - 1, sortOrd);
		}
	};

	const sorting = () => {
		sortOrd == "asc" ? setSortOrd("desc") : setSortOrd("asc");
		routeTo(names, page, sortOrd);
	};

	return (
		<>
			<Head>
				<title>Home</title>
				<meta names="description" content="Generated by create next app" />
				<link rel="icon" href="/Logo.png" />
			</Head>
			<div className={`${styles.topJob}`}>
				<h1 className="py-4 px-5 mx-5 text-light">Top Jobs</h1>
			</div>
			<div className="container-fluid row">
				<form onSubmit={(e) => onSubmit(e)}>
					<div className={`col-12 py-5`}>
						<div
							className={`${styles.searchMenu} d-flex justify-content-center align-items-center position-relative start-50 col-11`}>
							<div className={`col-9`}>
								<input
									type="text"
									placeholder="Search user"
									className={`${styles.searchbar} col-11`}
									onChange={(e) => setNames(e.target.value)}
								/>
							</div>
							<div className={`cols px-3`}>
								<Image src="/search.png" width={24} height={24} alt="" />
							</div>
							<div className={`dropdown col-1 ${styles.categoryMobile}`}>
								<button
									className={`${styles.searchDropdown} px-2`}
									type="button"
									data-bs-toggle="dropdown"
									aria-expanded="false">
									Kategori
								</button>
								<ul className="dropdown-menu">
									<li>
										<a className="dropdown-item" href="#">
											Sortir berdasarkan nama
										</a>
									</li>
									<li>
										<a className="dropdown-item" href="#">
											Sortir berdasarkan skill
										</a>
									</li>
									<li>
										<a className="dropdown-item" href="#">
											Sortir berdasarkan lokasi
										</a>
									</li>
									<li>
										<a className="dropdown-item" href="#">
											Sortir berdasarkan freelance
										</a>
									</li>
									<li>
										<a className="dropdown-item" href="#">
											Sortir berdasarkan fulltime
										</a>
									</li>
								</ul>
							</div>
							<div className="cols">
								<button type="submit" className={`${styles.searchBtn} px-4`}>
									Search
								</button>
							</div>
						</div>
					</div>
				</form>
				<div className={`col-md-12 py-md-5 py-3 ms-md-4 ${styles.cardMobile}`}>
					<>
						{!router.query.names ? (
							<></>
						) : data.length == 0 || null || undefined ? (
							<div className="text-center">
								<h1>User not found</h1>
							</div>
						) : (
							data.map((item, index) => {
								return (
									<Link
										href={`/profile/${item.id_user}`}
										className={`d-flex position-relative col-md-11 mb-3 col-12 py-md-2 pe-md-5 ms-md-5 border rounded ${styles.links}`}
										key={index}>
										<div className="d-flex">
											<div className={`pe-md-5 ms-md-5 ms-2`}>
												<Image
													src={`${process.env.NEXT_PUBLIC_BACKEND_URL}/${item.profile_pic}`}
													width={95}
													height={95}
													className={`${styles.profileImage}`}
													alt=""
												/>
											</div>
											<div className="ps-md-4 ps-4">
												<h5 className="text-dark">{item.names}</h5>
												<p className={`${styles.text}`}>{item.jobdesk}</p>
												{item.domisili == null ? (
													<></>
												) : (
													<div className="row">
														<Image
															src="/map.png"
															width={14}
															height={14}
															className="col-auto"
															alt=""
														/>
														<p
															className={`col-auto ${styles.text} ${styles.textAddress}`}>
															{item.domisili}
														</p>
													</div>
												)}
												<div className="d-flex flex-row">
													{item.skill != null ? (
														item.skill.split(",").map((item, index) => (
															<button
																key={index}
																className={`m-1 p-1 ${styles.btnSkills}`}>
																{item}
															</button>
														))
													) : (
														<p className="text-secondary">No skill</p>
													)}
												</div>
											</div>
										</div>
										<div
											href={`/profile/${item.id_user}`}
											className="my-auto ms-auto">
											<button
												type="submit"
												className={`${styles.searchBtn} my-auto`}>
												Lihat Profil
											</button>
										</div>
									</Link>
								);
							})
						)}
					</>
				</div>
				<div className="d-flex justify-content-center mt-4">
					<nav aria-label="Page navigation example">
						<ul className="pagination">
							<li className="page-item">
								<button className="page-link" onClick={() => prevPage()}>
									Previous
								</button>
							</li>
							<li className="page-item">
								<button className="page-link">{page}</button>
							</li>
							<li className="page-item" disabled={data <= 0}>
								<button
									className="page-link"
									disabled={data <= 0}
									onClick={() => nextPage()}>
									Next
								</button>
							</li>
							<li className="page-item">
								<button
									className="page-link"
									aria-label="Next"
									onClick={() => sorting()}>
									<span aria-hidden="true">{sortOrd}</span>
								</button>
							</li>
						</ul>
					</nav>
				</div>
			</div>
		</>
	);
};

HomeRecruiter.layout = "L3";

export default HomeRecruiter;
